README for Subset application.
-----------------------------------------------------------------------
  Class that performs a summation by:
  	- starting at the beginning of the Integer set
   - adding the current set index to the total sum
   - checking the difference between the summation value and the current sum;
     if that value is in the result set, add it into the subset and the sum.
   - the difference usually results in the sum == the summation. 
   - This code checks for several special cases:
   	- If the sum goes over the summation, we've gone too far; in this case,
   	  and in the case of the sum == summation, we remove the 2nd element in
   	  the Integer set copy. This is because we only modify the primary
         Integer set when we want the "base" number to go to the next [0] number.
       - Example: for a summation of 10 and an Integer set of 1-6, we'd start
         at 1 and add until the difference is found in the set. In this case, when 
         we get to 3, 10-6 = 4, which is in the set. So, 4 gets added to there and
         we have {1, 2, 3, 4}. If we remove the 2, we add until the difference is found.
         In that case, that happens when we hit 3 (1+3=4, 10-4=6, which is in the set), we
         add it in, so we get {1,3,6}. 
       - If we go over the summation at any point during the iteration, we'll remove the 2nd
         element and perform the above logic from the first element.
       - As values are added to the sum and the sum != summation, the copy of the Integer list
         will dwindle as the added elements will be removed.
       - This will continue until there is only one element in the list. Once we reach the end 
         we go back to the initial Integer list, remove the first element, and continue.
       - Example: In the above example, when we hit "1, 6" and then "1", we'll loop back to "2,3,4,5,6".
         This is done to rule out any combination of 1 or 2 numbers in the set that might 
         equal the summation.

There is no capability for user input just yet. Instead, please check out this project via Github at https://github.com/MSerrano0410/subset or via SSH at git@github.com:MSerrano0410/subset.git. It's public, so anyone should be able to check it out. 
----------------------------------------------------------------------
The jUnit test suite SubsetTests.java can be used to create test ArrayLists and summation values. You'd then need to watch the console in your favorite Java IDE in order to view the results. I can certainly change this to provide user input, and I can also provide screenshots of these results.
